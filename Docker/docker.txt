------------Udemy Course by Academind Schawze Muller----->
Fundamental concepts of docker includes
1) Docker Conatiners
2) DOcker Images

A docker is a tool for creating and managing containers.

Container is a package of code and set of dependencies to run that code.
Eg: Node Js code and node js runtime

Why docker containers?
- Different Development and production environments -> ex: latest version we used in development but on server we have older version installed to cope with this use docker container so it runs as is

- Different development environments within a team

- clashing tools /versions between different projects

Virtual Machines/ Virutal os -> OS installed on top our host os system
Pros:
1) Seprated Environments
2) Environment-specific configurations are possible
3) Environment configurations can be shared and reproduced reliably

cons:
1)Redundant duplication, waste of memory
2)Perfoemance can be slow, boot times can be long
3)Reproducing on another computer/server is possible but may still be tricky.

How docker helps us by overcoming the cons of virtual machines?

--- Container A, Container B, Container C
---- Docker Engine
---- OS built-in /emulated Container Support
---- our OS

Containers vs Virutual Machines

1) Low impact on OS, Very Fast and minimal disk space required
 - Bigger impact on os, slower and higher disk space required

2) Sharing, re-building and distribution is easy
	- Sharing, re-building and distribution is challenging

3) Encapsultae apps/environments instead of whole machines
	- Encapuslate whole machines instead of apps/environments.

Installing Docker
1) For windows and machines
Docker desktop or Docker Toolbook

2) For Linux Docker has inbuilt support so need to install docker engine


Docker Commands

1) docker build . -> builds our environment project with required dependencies
2) docker run -p 3000:3000 [imageid]
3) docker ps -a -> lists all running containers
4) docker stop [containerName]
5) docker-machine ip to get ip address of virtual machine running only useful if u build docker using docker toolbox

Docker Images are the temaplates/blueprints for conatiner (contains code + run time dependencies).

By using an image we can build multiple containers which satifies the image

Docker Hub is a tool from where we can get official built-in third party images to build our container
https://hub.docker.com/

docker run node
to run node in docker to use repl use command docker run -it node

to create your own image create a Dockerfile in ur project
and run command docker build . -> this builds the image

Note: images are read-only that means changes made in code will not be reflected until you build that image again
Note: Docker images are layer based and cache the changes if their are no file chnages


Stopping and restarting Containers:

1) List of all running conatiner -> docker ps
2) list of all running and non-running containers -> docker ps -a
3) to run a new container -> docker run -p 3000:80 [imageid]  -> p specifies port to run
4) restarting a stopped container -> docker start [containername]
5) to stop conatiner ->  docker stop [containername]
6) to attach back again -> docker attach [containername]
7) to dettach ->  docker dettach [containername]
8) to fetch logs of a container -> docker logs [containername]
9) to interact with terminal while running a docker ->  docker run -it [docakerimageid]
10) remove/delete containers  -> docker rm [conatinername1 containername2 conatinername3] note: only stopped conatiners can be removed
11) to list all images -> docker images
12) remove/deleting images -> docker rmi [imageid imageid imageid] -> to remove images we need to ensure container is removed first (images will not be reomoved if containers are stopped or running]
13) to remove a stopped conatiner automatically when conatiner is no longer needed -> docker run -p 3000:80 --rm [imageid]
14) we can inspect an image to get full details -> docker inspect image
15) copying files into/from a container -> docker cp [srcpath] [conatinername/destinationpath] ex: docker cp dummy/. boring_container:/test
16) Naming a conatiner -> docker run --name mycontainer [imageid]
17) Naming and tagging a image -> docker build -t [imagename]:[tagname] . ex : docker build -t node:latest .
18) to change image tag that is already created -> docker tag [odimagename:tag] [newimagename:tag]
ex: docker tag nodeapp:latest academind/node-hello-world:latest
19) to delete all images -> docker image prune -a


Note: docker run command runs in attached mode and docker start will run in detached mode
Attached mode means no command can be entered - it runs in foreground mode and dettached means we can run command - it runs in background mode
attached means listening to container.

Note:
By default, if you run a Container without -d, you run in "attached mode".
If you started a container in detached mode (i.e. with -d), you can still attach to it afterwards without restarting the Container with the following command:
docker attach CONTAINER
attaches you to a running Container with an ID or name of CONTAINER.
--------------------------------------------------
Sharing images via docker hub or private registry
----------------------------------------------
docker login command to login into docker hub account and docker logout command to logout from dockerhub account

1) Push images to docker hub
docker push path/file

2) Pulling and using images from docker-hub
docker pull [path/file]

------------------------------------------------------------
Docker from Geek Of Geeks
---------------------------------------------

Docker is a tool for building, running and deploying/managing docker containers.
Docker is a set of PAAS (platform as a service) providers that provides os system-level virtualization to run our code in a package called COntainers.
All containers can communicate with each other through well known chnannels. SInce docker needs only one Kernel server to run all the conatiners so it overcomes all the drawbacks that we have with virtual machines

PAAS is a cloud computing model where some third party tool provides us the environment to run and deploy our code.

Container = Code + run time dependencies and evnvironment.

Features of Docker
Docker reduces the size of development by providing a smaller part of the OS via containers.
It is easier to work on the same project by different teams with the help of Containers.
Docker containers can be deployed anywhere, on any physical, or virtual machines and on the cloud.
Docker containers are lightweight so, it becomes east to scale them.

Advantages of Docker
Docker uses less memory.
The full operating system is not required to run an application.
Containers run faster than the other Virtual Machines.
It is lightweight.
It allows us to use a remote repository to share your containers with other teams.
To reduce the risks, it uses dependencies.

Disadvantages of Docker
Complexity will increase due to layering.
It is difficult to manage a large number of containers.
For an application that needs better graphics, Docker is not suitable for it.
Cross-platform compatibility is not allowed.

Docker file contains a set of instructions to genrate a docker image.

Docker image is a set of instruction to genrate a docker container. Docker image consists all dependencies to run a project in a virtual machine.

Docker container is a runtime instance of a docker image. Containers contain the whole kit required for an application to run, so that the application can run in an isolated way.

Docker Hub is a cloud based docker container images repository where we can push our container images fetch it and reuse it.

Docker compose is a set of instruction written in YAML file which runs along with docker swarm which helps in providing direction for building and deploying multiple containers.


Docker Commands:

1) docker run
2) docker pull
3) docker ps
4) docker start
5) docker stop
6) docker rm
7) docker rmi
8) docker images
9) docker exec
10) docker login
11) docker build
12) docker push

--------------
Docker Engine and docker architecture
-----------------

Docker engine is a software which is responsible for building, running and deploying/maintaining docker containers. It is also called as daemon process.

Docker engine uses client-server architecture. so 3 import  stuff of docker engine is

1) CLient -> docker cli is a client where we are able to run docker commands to interact with docker engine/server/daemon.
2) Server -> Calles as Daemon process whose responibility is to build , run and manage docker conatiners, iamges , networks and volumes of docker.
3) Rest API -> which helps in communicating b/w client and server.

Why docker?
In microservices architecture, we know we will create mutliples services which may run on its own run time , own dependencies and own code.To run all this we need a os. SO instead of creating creating different os for each services to run we can use docker which provides dependencies tied with docker stuff.

docker reduces the following
1) need of os to run a service
2) no need of extra memory to manage each os
3) docker helps in as is deploynment -> meaning it ensures that if the code is running on my system that means it will definetly run on host machine as well without any issues.


---------------
Docker for allows
----------------

AWS provides its ECS (Elastic Container Service) for managing, deploying and mainting docker containers on cloud and it can also interact with other aws services such as load balancing, service discovery and container heath monitoring.

--------------------
Docker commands
------------------

https://www.geeksforgeeks.org/docker-instruction-commands/?ref=lbp

docker file commands
https://docs.docker.com/engine/reference/builder/
https://dev.to/aws-builders/understanding-the-dockerfile-format-3cc6


for others go through all the topics mentioned in the source link
